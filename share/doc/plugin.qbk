[library Plugin
    [quickbook 1.5]
    [version @Plugin_VERSION@]
    [copyright 2012-2013 Jérémy Coulon]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Coulon, Jérémy] ]
]

[section Introduction]

This library provides a portable way of loading/unloading a C++ plugin.

The name 'plugin' refers to a dynamic library that is optional and can be loaded and unloaded at runtime.

Depending on OS, a plugin may have a different filename extension:

* on Windows, a plugin has a '.dll' extension. Note that most DLLs are not plugins. A DLL must be designed specifically to be a plugin.
* on Linux, a plugin usually has a '.so' extension. Note that most .so libraries are not plugins. A library must be designed specifically to be a plugin.

[warning On Linux platform, in order to build an executable (or library) that can dynamically load a plugin you must link your executable (or library) with libdl.so.
On Windows platform, you don't need to do anything particular.
]

This library provides a Plugin::IPlugin interface which can be used as a base interface for your own plugins.

You may create your specific plugin interface that inherits from Plugin::IPlugin.

Plugin::IPlugin interface depends on the 3rd party Versionning project ([@https://github.com/jeremy-coulon/versionning]).

However, the use of Plugin::IPlugin is not mandatory and you can use the class Plugin::PluginLoader with your own provided interface type.

[endsect]

[section Installation]

This library is a header-only library. That means you don't need to compile anything to use it in your own project. You can just write :

  #include <Plugin/PluginLoader.h>

[endsect]

[section Examples]

[import @PROJECT_SOURCE_DIR@/examples/PluginExample/src/MyPlugin.h]
[import @PROJECT_SOURCE_DIR@/examples/PluginExample/src/MyPlugin.cpp]
[import @PROJECT_SOURCE_DIR@/examples/PluginLoaderExample/src/main.cpp]

First, create your plugin project as a classic dynamic library.

The following plugin example contains only one class: MyPlugin.
[MyPlugin_h_file]

Implementation of MyPlugin class is straightforward.
[MyPlugin_cpp_file]

Now let's see how to load your newly created plugin.

In the following code sample, we create an executable that takes the plugin path as an argument.
[main_cpp_file]

If you built the provided example from source (using CMake), you can try it by going to build directory and running the following command:

* On Linux 64 bits platform :
[pre
./bin/PluginLoaderExample ./lib/x86_64-linux-gnu/libPluginExample.so
]
* On Windows Visual Studio 2010 32 bits platform :
[pre
.\bin\PluginLoaderExample.exe .\lib\x86-windows-vc100\PluginExample.dll
]

Expected program output is :
[pre
Plugin name    = Example
Plugin version = 1.3.4.2
]

[endsect]

[xinclude @CMAKE_CURRENT_BINARY_DIR@/boostbook/boostbook.xml]
